name: CI/CD

# Workflow for continuous integration and deployment
# Triggered on pushes to main and pull requests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job to validate environment setup and run tests
  test:
    runs-on: ubuntu-latest
    
    # Set up PostgreSQL service container
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: zigral
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry config virtualenvs.create false
        poetry install --no-interaction --no-ansi --with dev

    # New step: Validate environment
    - name: Validate environment
      run: |
        python -c "import sys; print(f'Python {sys.version}')"
        python -c "import nest_asyncio"  # Just verify it can be imported

    - name: Run linting
      run: |
        poetry run black . --check
        poetry run isort . --check-only --diff
        poetry run flake8

    - name: Run tests
      env:
        DATABASE_URL: postgresql://user:password@localhost:5432/zigral
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        poetry run pytest tests/ -v --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: true
        verbose: true
        retry_max_count: 3
        retry_delay_seconds: 90

  # Job to run code quality checks
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: poetry install

    - name: Run linters
      run: |
        poetry run black . --check
        poetry run isort . --check
        poetry run flake8 .

  # Job to build and push Docker images
  build-and-push:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build and push Orchestrator image
    - name: Build and push Orchestrator
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/orchestrator:latest
          ghcr.io/${{ github.repository }}/orchestrator:${{ github.sha }}
        build-args: |
          SERVICE_NAME=orchestrator

    # Build and push Context Manager image
    - name: Build and push Context Manager
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/context-manager:latest
          ghcr.io/${{ github.repository }}/context-manager:${{ github.sha }}
        build-args: |
          SERVICE_NAME=context-manager 