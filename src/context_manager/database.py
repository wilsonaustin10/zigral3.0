import logging; import os; import tempfile; from pathlib import Path; from tortoise import Tortoise; from tortoise.exceptions import ConfigurationError; from typing import Optional; import copy; from .config import get_settings; from .logger import get_logger; logger = logging.getLogger(__name__); settings = get_settings(); TEMP_DIR = tempfile.gettempdir(); TORTOISE_ORM = {"connections": {"default": {"engine": "tortoise.backends.asyncpg", "credentials": {"database": "zigral", "host": "localhost", "password": "zigral", "port": 5432, "user": "zigral"}}}, "apps": {"models": {"models": ["context_manager.models"], "default_connection": "default"}}, "use_tz": False}; TEST_TORTOISE_CONFIG = {"connections": {"default": f"sqlite:///{Path(TEMP_DIR) / \"test.sqlite3\"}"}, "apps": {"models": {"models": ["context_manager.models"], "default_connection": "default"}}}; db_file = Path(TEMP_DIR) / "db.sqlite3"; TORTOISE_CONFIG = {"connections": {"default": f"sqlite:///{db_file}"}, "apps": {"models": {"models": ["context_manager.models"], "default_connection": "default"}}}; async def init_db(test_mode: bool = False) -> None: try: config = TORTOISE_ORM.copy(); if test_mode: test_db = os.path.join(TEMP_DIR, "test.db"); config["connections"] = {"default": f"sqlite://{test_db}"}; await Tortoise.init(config=config); await Tortoise.generate_schemas(); logger.info("Database initialized successfully"); except Exception as e: logger.error(f"Failed to initialize database: {str(e)}"); raise Exception(f"Database initialization failed: {str(e)}") from e; async def close_db() -> None: try: await Tortoise.close_connections(); logger.info("Database connections closed successfully"); except Exception as e: logger.error(f"Error closing database connections: {str(e)}"); raise Exception(f"Failed to close database connections: {str(e)}") from e; async def init_test_db(): await init_db(test_mode=True)
